name: Constuction, tests et GitHub Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  linting_pycount:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6     
      - uses: ricardochaves/python-lint@v1.4.0
        with:
          python-root-list: "library/pycount"
          use-pylint: false
          use-pycodestyle: false
          use-flake8: true
          use-black: false
          use-mypy: false
          use-isort: false
          extra-pylint-options: ""
          extra-pycodestyle-options: ""
          extra-flake8-options: "--exclude=__init__.py"
          extra-black-options: ""
          extra-mypy-options: ""
          extra-isort-options: ""
    
  test_pycount:
    needs: linting_pycount
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - name: Obtention du code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Installation de Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Exécution des tests
        working-directory: library/pycount
        run: python3 -m unittest

  test_cppcount:
    runs-on: ubuntu-latest
    steps:
      - name: Obtention du code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Installation des dépendances du système
        run: | 
          sudo apt-get update
          sudo apt-get install ninja-build cmake build-essential python3
    
      - name: Création du dossier de compilation
        working-directory: library/cppcount
        run: |
          mkdir build
          
      - name: Compilation
        working-directory: library/cppcount/build
        run: |
          cmake ..
          make
          
      - name: Exécution des tests
        working-directory: library/cppcount/build/cppcount/tests
        run: |
          ./test_cppcount
          
      - name: Compilation du module Python
        working-directory: library/cppcount
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade build
          python3 -m build
          
  build_firmware:
    runs-on: ubuntu-latest
    steps:
    
    - name: Obtention du code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - name: Compilation     
      uses: arduino/compile-sketches@v1
      with:
        fqbn: 'arduino:avr:uno'
        sketch-paths: '- firmware'
        verbose: True
        
  create_release:
    needs: [test_pycount, test_cppcount, build_firmware]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Calcul du numéro de version à partir des tags/commits
        uses: paulhatch/semantic-version@v4.0.2
        id: semantic_version
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          format: "${major}.${minor}.${patch}"
          short_tags: false
          bump_each_commit: true
    
      - name: Génération du numéro de version
        id: generate_version_output
        run: echo "::set-output name=version::${{ steps.semantic_version.outputs.major }}.${{ steps.semantic_version.outputs.minor }}.${{ steps.semantic_version.outputs.patch }}"
        shell: bash
      
      - name: Affichage de la version
        run: echo "Version ${{ steps.generate_version_output.outputs.version }}"
        shell: bash
        
      - name: Création du release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: v${{ steps.generate_version_output.outputs.version }}
          release_name: demo_integration-v${{ steps.generate_version_output.outputs.version }}
          body: |
              Dernière compilation de demo_integration.
          draft: false
          prerelease: true

      - name: Écriture du fichier pour la destination du release.
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Téléversement de release_url
        uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: release_url.txt
          
      - name: Écriture du fichier pour la version du release.
        run: echo "${{ steps.generate_version_output.outputs.version }}" > release_version.txt
      - name: Téléversement de release_version
        uses: actions/upload-artifact@v2
        with:
          name: release_version
          path: release_version.txt
    
  upload_cppcount:
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        build-type: [Release, Debug]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
   
    - uses: actions/download-artifact@v2
      with:
        name: release_url
    - name: Obtention de release_url
      id: get_release_info
      run: |
        echo "::set-output name=upload_url::$(cat release_url.txt)"
       
    - uses: actions/download-artifact@v2
      with:
        name: release_version   
    - name: Obtention de release_version
      id: get_release_version
      run: |
        echo "::set-output name=version::$(cat release_version.txt)"
  
    - name: Installation des dépendances du système
      run: | 
        sudo apt-get update
        sudo apt-get install ninja-build cmake build-essential python3
    
    - name: Création du dossier de compilation
      working-directory: library/cppcount
      run: |
        mkdir build
          
    - name: Compilation
      working-directory: library/cppcount/build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type}} -DCPP_COUNT_VERSION="${{steps.get_release_version.outputs.version}}" -DCMAKE_INSTALL_PREFIX=$PWD/dist -DCPP_COUNT_ENABLE_TESTS=0
        make install
        
    - name: Génération du nom de fichier
      id: generate_release_file_name
      run: |
        echo "::set-output name=release_file_name::cppcount-${{ matrix.os }}-\
        ${{ matrix.build-type }}-\
        ${{ steps.get_release_version.outputs.version }}"
    
    - name: Création de l'archive
      working-directory: library/cppcount/build/dist
      run: |
        tar cvzf ../${{ steps.generate_release_file_name.outputs.release_file_name }}.tar.gz .
        
    - name: Téléversement de l'archive
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: library/cppcount/build/${{ steps.generate_release_file_name.outputs.release_file_name }}.tar.gz
        asset_name: ${{ steps.generate_release_file_name.outputs.release_file_name }}.tar.gz
        asset_content_type: application/x-gzip      

  upload_cppcount_pybind11:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
    - name: Obtention du code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Installation de Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        
    - uses: actions/download-artifact@v2
      with:
        name: release_url
    - name: Obtention de release_url
      id: get_release_info
      run: |
        echo "::set-output name=upload_url::$(cat release_url.txt)"
       
    - uses: actions/download-artifact@v2
      with:
        name: release_version   
    - name: Obtention de release_version
      id: get_release_version
      run: |
        echo "::set-output name=version::$(cat release_version.txt)"
  
    - name: Changement du numéro de version dans setup.py
      working-directory: library/cppcount
      run: |
        sed -i 's/version="dev"/version="${{steps.get_release_version.outputs.version}}"/g' setup.py
   
    - name: Compilation
      working-directory: library/cppcount
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade build
        python3 -m build
        
    - name: Obtention du nom du fichier
      id: get_wheel_filename
      working-directory: library/cppcount/dist
      run: |
        echo "::set-output name=filename::$(ls *.whl)"
      
    - name: Téléversement du fichier
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: library/cppcount/dist/${{steps.get_wheel_filename.outputs.filename}}
        asset_name: ${{steps.get_wheel_filename.outputs.filename}}
        asset_content_type: application/octet-stream
  
  upload_pycount:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
    - name: Obtention du code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - uses: actions/download-artifact@v2
      with:
        name: release_url
    - name: Obtention de release_url
      id: get_release_info
      run: |
        echo "::set-output name=upload_url::$(cat release_url.txt)"
       
    - uses: actions/download-artifact@v2
      with:
        name: release_version   
    - name: Obtention de release_version
      id: get_release_version
      run: |
        echo "::set-output name=version::$(cat release_version.txt)"
  
    - name: Changement du numéro de version dans setup.py
      working-directory: library/pycount
      run: |
        sed -i 's/version="dev"/version="${{steps.get_release_version.outputs.version}}"/g' setup.py
   
    - name: Compilation
      working-directory: library/pycount
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade build
        python3 -m build
        
    - name: Obtention du nom du fichier
      id: get_wheel_filename
      working-directory: library/pycount/dist
      run: |
        echo "::set-output name=filename::$(ls *.whl)"
      
    - name: Téléversement du fichier
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: library/pycount/dist/${{steps.get_wheel_filename.outputs.filename}}
        asset_name: ${{steps.get_wheel_filename.outputs.filename}}
        asset_content_type: application/octet-stream
      
  upload_benchmark:
    needs: create_release
    runs-on: ubuntu-latest
    
    steps:
      - name: Obtention du code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Installation des dépendances du système
        run: | 
          sudo apt-get update
          sudo apt-get install ninja-build cmake build-essential python3 python3-venv
    
      - name: Création du dossier de compilation
        working-directory: library/benchmarks
        run: |
          mkdir build

      - name: Compilation
        working-directory: library/benchmarks/build
        run: |
          cmake ..
          make

      - name: Création des venvs
        working-directory: library/benchmarks
        run: |
          python3 -m venv venv-pycount
          python3 -m venv venv-cppcount-pybind11
          
      - name: Installation pour pycount
        working-directory: library/benchmarks
        run: |
          source ./venv-pycount/bin/activate
          python3 -m pip install ../pycount
       
      - name: Installation pour cppcount-pybind11
        working-directory: library/benchmarks
        run: |
          source ./venv-cppcount-pybind11/bin/activate
          python3 -m pip install ../cppcount

      - name: Exécution des benchmarks 
        working-directory: library/benchmarks/build
        run: |
          echo "cppcount" >> benchmarks.txt
          ./benchmark_cppcount >> benchmarks.txt
          echo "pycount" >> benchmarks.txt
          source ../venv-pycount/bin/activate
          python3 ../benchmark_pycount.py >> benchmarks.txt
          echo "cppcount-pybind11" >> benchmarks.txt
          source ../venv-cppcount-pybind11/bin/activate
          python3 ../benchmark_cppcount_pybind11.py >> benchmarks.txt
          cat benchmarks.txt
      
      - uses: actions/download-artifact@v2
        with:
          name: release_url
      - name: Obtention de release_url
        id: get_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url.txt)"

      - name: Téléversement du fichier benchmarks.txt
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: library/benchmarks/build/benchmarks.txt
          asset_name: benchmarks.txt
          asset_content_type: text/plain
