# This is a basic workflow to help you get started with Actions

name: Constuction, tests et GitHub Release

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  linting-pycount:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6     
      - uses: ricardochaves/python-lint@v1.4.0
        with:
          python-root-list: "library/pycount"
          use-pylint: false
          use-pycodestyle: false
          use-flake8: true
          use-black: false
          use-mypy: false
          use-isort: false
          extra-pylint-options: ""
          extra-pycodestyle-options: ""
          extra-flake8-options: "--exclude=__init__.py"
          extra-black-options: ""
          extra-mypy-options: ""
          extra-isort-options: ""
    
  test-pycount:
    needs: linting-pycount
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Installation de Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Exécution des tests
        working-directory: library/pycount
        run: python3 -m unittest


  # This workflow contains a single job called "build"
  test-cppcount:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install system dependencies
        run: | 
          sudo apt-get update
          sudo apt-get install ninja-build cmake build-essential python3
    
      
      - name: Create build directory
        working-directory: library/cppcount
        run: |
          mkdir build
      - name: Build project
        working-directory: library/cppcount/build
        run: |
          cmake ..
          make
          
      - name: Execute tests
        working-directory: library/cppcount/build/cppcount/tests
        run: |
          ./test_cppcount
          
      - name: Build Python Wheel
        working-directory: library/cppcount
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade build
          python3 -m build
        



  # This workflow contains a single job called "build"
  release:
    needs: [test-pycount, test-cppcount]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Calcul du numéro de version à partir des tags/commits
        uses: paulhatch/semantic-version@v4.0.2
        id: semantic_version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          # change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          # namespace: test-auto-tag-release
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true
    
      - name: Génération du numéro de version
        id: generate_version_output
        run: echo "::set-output name=version::${{ steps.semantic_version.outputs.major }}.${{ steps.semantic_version.outputs.minor }}.${{ steps.semantic_version.outputs.patch }}"
        shell: bash
      
      - name: Affichage de la version
        run: echo "Version ${{ steps.generate_version_output.outputs.version }}"
        shell: bash
        
      - name: Création du release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.generate_version_output.outputs.version }}
          release_name: demo_integration-v${{ steps.generate_version_output.outputs.version }}
          body: |
              Dernière compilation de demo_integration.
          draft: true
          prerelease: true

      - name: Écriture du fichier pour la destination du release.
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Téléversement de release_url
        uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: release_url.txt
          
      - name: Écriture du fichier pour la version du release.
        run: echo "${{ steps.generate_version_output.outputs.version }}" > release_version.txt
      - name: Téléversement de release_version
        uses: actions/upload-artifact@v2
        with:
          name: release_version
          path: release_version.txt
  
